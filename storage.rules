rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Users collection - users can only access their own data
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // ALL POSSIBLE SYMPTOM LOG COLLECTIONS - multiple naming conventions
    match /dailySymptomLogs/{logId} {
      allow read, write: if request.auth != null && 
        (resource == null || resource.data.userId == request.auth.uid);
      allow create: if request.auth != null && 
        request.resource.data.userId == request.auth.uid;
    }
    
    match /symptom_logs/{logId} {
      allow read, write: if request.auth != null && 
        (resource == null || resource.data.userId == request.auth.uid);
      allow create: if request.auth != null && 
        request.resource.data.userId == request.auth.uid;
    }
    
    match /dailyLogs/{logId} {
      allow read, write: if request.auth != null && 
        (resource == null || resource.data.userId == request.auth.uid);
      allow create: if request.auth != null && 
        request.resource.data.userId == request.auth.uid;
    }
    
    // Symptom patterns and correlations
    match /symptomPatterns/{patternId} {
      allow read, write: if request.auth != null && 
        (resource == null || resource.data.userId == request.auth.uid);
      allow create: if request.auth != null && 
        request.resource.data.userId == request.auth.uid;
    }
    
    match /symptomCorrelations/{correlationId} {
      allow read, write: if request.auth != null && 
        (resource == null || resource.data.userId == request.auth.uid);
      allow create: if request.auth != null && 
        request.resource.data.userId == request.auth.uid;
    }
    
    // Symptom wheel entries
    match /symptomWheelEntries/{entryId} {
      allow read, write: if request.auth != null && 
        (resource == null || resource.data.userId == request.auth.uid);
      allow create: if request.auth != null && 
        request.resource.data.userId == request.auth.uid;
    }
    
    // AI companions - users can only access their own companions
    match /aiCompanions/{companionId} {
      allow read, write: if request.auth != null && 
        (resource == null || resource.data.userId == request.auth.uid);
      allow create: if request.auth != null && 
        request.resource.data.userId == request.auth.uid;
    }
    
    // Conversation history - users can only access their own conversations
    match /conversationHistory/{messageId} {
      allow read, write: if request.auth != null && 
        (resource == null || resource.data.userId == request.auth.uid);
      allow create: if request.auth != null && 
        request.resource.data.userId == request.auth.uid;
    }
    
    // AI health insights - users can only access their own insights
    match /aiHealthInsights/{insightId} {
      allow read, write: if request.auth != null && 
        (resource == null || resource.data.userId == request.auth.uid);
      allow create: if request.auth != null && 
        request.resource.data.userId == request.auth.uid;
    }
    
    // Monsters - users can only access their own monsters (support both uid and userId fields)
    match /monsters/{monsterId} {
      allow read, write: if request.auth != null && 
        (resource == null || resource.data.userId == request.auth.uid || resource.data.uid == request.auth.uid);
      allow create: if request.auth != null && 
        (request.resource.data.userId == request.auth.uid || request.resource.data.uid == request.auth.uid);
    }
    
    // Romantic monsters - users can access their own and read others for matching
    match /romanticMonsters/{monsterId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        (resource == null || resource.data.userId == request.auth.uid);
      allow create: if request.auth != null && 
        request.resource.data.userId == request.auth.uid;
    }
    
    // Prescriptions - users can only access their own (support both uid and userId fields)
    match /prescriptions/{prescriptionId} {
      allow read, write, delete: if request.auth != null && 
        (resource == null || resource.data.userId == request.auth.uid || resource.data.uid == request.auth.uid);
      allow create: if request.auth != null && 
        (request.resource.data.userId == request.auth.uid || request.resource.data.uid == request.auth.uid);
    }
    
    // Products - users can only access their own (support both uid and userId fields)
    match /products/{productId} {
      allow read, write, delete: if request.auth != null && 
        (resource == null || resource.data.userId == request.auth.uid || resource.data.uid == request.auth.uid);
      allow create: if request.auth != null && 
        (request.resource.data.userId == request.auth.uid || request.resource.data.uid == request.auth.uid);
    }
    
    // Exercises - users can only access their own (support both uid and userId fields)
    match /exercises/{exerciseId} {
      allow read, write, delete: if request.auth != null && 
        (resource == null || resource.data.userId == request.auth.uid || resource.data.uid == request.auth.uid);
      allow create: if request.auth != null && 
        (request.resource.data.userId == request.auth.uid || request.resource.data.uid == request.auth.uid);
    }
    
    // Foods - users can only access their own (support both uid and userId fields)
    match /foods/{foodId} {
      allow read, write, delete: if request.auth != null && 
        (resource == null || resource.data.userId == request.auth.uid || resource.data.uid == request.auth.uid);
      allow create: if request.auth != null && 
        (request.resource.data.userId == request.auth.uid || request.resource.data.uid == request.auth.uid);
    }
    
    // Symptoms - users can only access their own (support both uid and userId fields)
    match /symptoms/{symptomId} {
      allow read, write, delete: if request.auth != null && 
        (resource == null || resource.data.userId == request.auth.uid || resource.data.uid == request.auth.uid);
      allow create: if request.auth != null && 
        (request.resource.data.userId == request.auth.uid || request.resource.data.uid == request.auth.uid);
    }
    
    // Streaks - users can only access their own (support both uid and userId fields)
    match /streaks/{streakId} {
      allow read, write: if request.auth != null && 
        (resource == null || resource.data.userId == request.auth.uid || resource.data.uid == request.auth.uid);
      allow create: if request.auth != null && 
        (request.resource.data.userId == request.auth.uid || request.resource.data.uid == request.auth.uid);
    }
    
    // Completions - users can only access their own (support both uid and userId fields)
    match /completions/{completionId} {
      allow read, write: if request.auth != null && 
        (resource == null || resource.data.userId == request.auth.uid || resource.data.uid == request.auth.uid);
      allow create: if request.auth != null && 
        (request.resource.data.userId == request.auth.uid || request.resource.data.uid == request.auth.uid);
    }
    
    // Tomb entries - users can only access their own (support both uid and userId fields)
    match /tomb/{tombId} {
      allow read, write: if request.auth != null && 
        (resource == null || resource.data.userId == request.auth.uid || resource.data.uid == request.auth.uid);
      allow create: if request.auth != null && 
        (request.resource.data.userId == request.auth.uid || request.resource.data.uid == request.auth.uid);
    }
    
    // Community posts - authenticated users can read all, write their own
    match /communityPosts/{postId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        (resource == null || resource.data.authorId == request.auth.uid);
      allow create: if request.auth != null && 
        request.resource.data.authorId == request.auth.uid;
    }
    
    // Challenges - authenticated users can read all
    match /challenges/{challengeId} {
      allow read: if request.auth != null;
      allow write: if false; // Only admin can create challenges
    }
    
    // User challenges - users can only access their own challenges
    match /userChallenges/{userChallengeId} {
      allow read, write: if request.auth != null && 
        (resource == null || resource.data.userId == request.auth.uid);
      allow create: if request.auth != null && 
        request.resource.data.userId == request.auth.uid;
    }
    
    // Achievements - authenticated users can read all
    match /achievements/{achievementId} {
      allow read: if request.auth != null;
      allow write: if false; // Only admin can create achievements
    }
    
    // User achievements - users can only access their own achievements
    match /userAchievements/{userAchievementId} {
      allow read, write: if request.auth != null && 
        (resource == null || resource.data.userId == request.auth.uid);
      allow create: if request.auth != null && 
        request.resource.data.userId == request.auth.uid;
    }
    
    // Point activities - users can only access their own activities
    match /pointActivities/{activityId} {
      allow read, write: if request.auth != null && 
        (resource == null || resource.data.userId == request.auth.uid);
      allow create: if request.auth != null && 
        request.resource.data.userId == request.auth.uid;
    }
    
    // Chat rooms - users can access rooms they're members of
    match /chatRooms/{roomId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        (resource == null || request.auth.uid in resource.data.members);
      allow create: if request.auth != null;
    }
    
    // Chat room members - authenticated users can read, modify their own membership
    match /chatRoomMembers/{memberId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        (resource == null || resource.data.userId == request.auth.uid);
      allow create: if request.auth != null && 
        request.resource.data.userId == request.auth.uid;
    }
    
    // Chat messages - users can read messages in rooms they're in, write their own
    match /chatMessages/{messageId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        (resource == null || resource.data.senderId == request.auth.uid);
      allow create: if request.auth != null && 
        request.resource.data.senderId == request.auth.uid;
    }
    
    // Message quality logs - users can only access their own logs
    match /messageQualityLogs/{logId} {
      allow read, write: if request.auth != null && 
        (resource == null || resource.data.userId == request.auth.uid);
      allow create: if request.auth != null && 
        request.resource.data.userId == request.auth.uid;
    }
    
    // Allow read access to leaderboard data (but users can only write their own)
    match /leaderboard/{document} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        (resource == null || resource.data.userId == request.auth.uid);
      allow create: if request.auth != null && 
        request.resource.data.userId == request.auth.uid;
    }
    
    // Anonymized research data - authenticated users can contribute
    match /research/{document} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        (resource == null || resource.data.userId == request.auth.uid);
      allow create: if request.auth != null && 
        request.resource.data.userId == request.auth.uid;
    }
    
    // User badges and rewards
    match /userBadges/{badgeId} {
      allow read, write: if request.auth != null && 
        (resource == null || resource.data.userId == request.auth.uid);
      allow create: if request.auth != null && 
        request.resource.data.userId == request.auth.uid;
    }
    
    // Additional daily logs collection
    match /dailyLogs/{logId} {
      allow read, write: if request.auth != null && 
        (resource == null || resource.data.userId == request.auth.uid);
      allow create: if request.auth != null && 
        request.resource.data.userId == request.auth.uid;
    }
    
    // For development: Allow all access for dev users in both development and production
    match /{document=**} {
      allow read, write: if request.auth != null && 
        request.auth.uid == "dev-user-123";
    }
    
    // Emergency dev access with different user ID pattern
    match /{document=**} {
      allow read, write: if request.auth != null && 
        request.auth.uid == "test-user-123";
    }
    
    // Deny all other access by default - this must be last
    match /{document=**} {
      allow read, write: if false;
    }
  }
}